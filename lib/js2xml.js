// Generated by CoffeeScript 1.7.1
(function() {
  var events, js2xmlparser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  js2xmlparser = require('js2xmlparser');

  events = require('events');

  exports.defaults = {
    attributeString: "@",
    colorPalette: ['0', '0000FF', 'FF0000', 'FFFFFF']
  };

  exports.Parser = (function(_super) {
    var convert, convertAll;

    __extends(Parser, _super);

    function Parser() {
      this.parseJson = __bind(this.parseJson, this);
      return Parser.__super__.constructor.apply(this, arguments);
    }

    convertAll = function(data) {
      var newPages, obj, page, pageId, _i, _len, _ref, _ref1, _ref2, _ref3;
      convert(data.content);
      _ref = data.content.page;
      for (pageId in _ref) {
        page = _ref[pageId];
        convert(page);
      }
      _ref1 = data.content.page;
      for (pageId in _ref1) {
        page = _ref1[pageId];
        _ref2 = page.obj;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          obj = _ref2[_i];
          convert(obj);
        }
      }
      newPages = [];
      _ref3 = data.content.page;
      for (pageId in _ref3) {
        page = _ref3[pageId];
        newPages.push(page);
      }
      return data.content.page = newPages;
    };

    convert = function(data) {
      var crv, _i, _len, _ref;
      data['@'] = {};
      if (data.id != null) {
        data['@'].id = data.id;
        delete data.id;
      }
      if (data.ver != null) {
        data['@'].ver = data.ver;
        delete data.ver;
      }
      if (data.encoded != null) {
        data['@'].encoded = data.encoded;
        delete data.encoded;
      }
      if (data.t != null) {
        data['@'].t = data.t;
        delete data.t;
      }
      if (data.s != null) {
        data['@'].s = data.s;
        delete data.s;
      }
      if (data.c != null) {
        data['@'].c = data.c;
        delete data.c;
      }
      if (data.xml_list != null) {
        _ref = data.xml_list.crv;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          crv = _ref[_i];
          convert(crv);
        }
      }
      if ((data.data != null) && (data.data.controlPoints != null)) {
        data.data.controlPoints = data.data.controlPoints.join(',');
      }
      if (data.imageId != null) {
        data.image_id = data.imageId;
        delete data.imageId;
      }
      return data;
    };

    Parser.prototype.parseJson = function(json, cb) {
      var result;
      convertAll(json);
      result = js2xmlparser('content', json.content, exports.defaults);
      result = result.replace(/<_[^>]*>/g, '');
      result = result.replace(/<\/_[^>]*>/g, '');
      return cb(null, result);
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseJson = function(json, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseJson(json, cb);
  };

}).call(this);
