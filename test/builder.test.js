// Generated by CoffeeScript 1.7.1
(function() {
  var assert, diff, diffeq, equ, fs, path, xml2js;

  xml2js = require('../lib/xml2js');

  assert = require('assert');

  fs = require('fs');

  path = require('path');

  diff = require('diff');

  equ = assert.equal;

  diffeq = function(expected, actual) {
    var diffless, patch;
    diffless = "Index: test\n===================================================================\n--- test\texpected\n+++ test\tactual\n";
    patch = diff.createPatch('test', expected.trim(), actual.trim(), 'expected', 'actual');
    if (patch !== diffless) {
      throw patch;
    }
  };

  module.exports = {
    'test building basic XML structure': function(test) {
      var actual, builder, expected, obj;
      expected = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><xml><Label></Label><MsgId>5850440872586764820</MsgId></xml>';
      obj = {
        "xml": {
          "Label": [""],
          "MsgId": ["5850440872586764820"]
        }
      };
      builder = new xml2js.Builder({
        renderOpts: {
          pretty: false
        }
      });
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test setting XML declaration': function(test) {
      var actual, builder, expected, opts;
      expected = '<?xml version="1.2" encoding="WTF-8" standalone="no"?><root/>';
      opts = {
        renderOpts: {
          pretty: false
        },
        xmldec: {
          'version': '1.2',
          'encoding': 'WTF-8',
          'standalone': false
        }
      };
      builder = new xml2js.Builder(opts);
      actual = builder.buildObject({});
      diffeq(expected, actual);
      return test.finish();
    },
    'test pretty by default': function(test) {
      var actual, builder, expected, obj;
      expected = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<xml>\n  <MsgId>5850440872586764820</MsgId>\n</xml>\n";
      builder = new xml2js.Builder();
      obj = {
        "xml": {
          "MsgId": ["5850440872586764820"]
        }
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test setting indentation': function(test) {
      var actual, builder, expected, obj, opts;
      expected = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<xml>\n    <MsgId>5850440872586764820</MsgId>\n</xml>\n";
      opts = {
        renderOpts: {
          pretty: true,
          indent: '    '
        }
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "xml": {
          "MsgId": ["5850440872586764820"]
        }
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test headless option': function(test) {
      var actual, builder, expected, obj, opts;
      expected = "<xml>\n    <MsgId>5850440872586764820</MsgId>\n</xml>\n";
      opts = {
        renderOpts: {
          pretty: true,
          indent: '    '
        },
        headless: true
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "xml": {
          "MsgId": ["5850440872586764820"]
        }
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test explicit rootName is always used: 1. when there is only one element': function(test) {
      var actual, builder, expected, obj, opts;
      expected = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><FOO><MsgId>5850440872586764820</MsgId></FOO>';
      opts = {
        renderOpts: {
          pretty: false
        },
        rootName: 'FOO'
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "MsgId": ["5850440872586764820"]
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test explicit rootName is always used: 2. when there are multiple elements': function(test) {
      var actual, builder, expected, obj, opts;
      expected = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><FOO><MsgId>5850440872586764820</MsgId></FOO>';
      opts = {
        renderOpts: {
          pretty: false
        },
        rootName: 'FOO'
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "MsgId": ["5850440872586764820"]
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test default rootName is used when there is more than one element in the hash': function(test) {
      var actual, builder, expected, obj, opts;
      expected = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><root><MsgId>5850440872586764820</MsgId><foo>bar</foo></root>';
      opts = {
        renderOpts: {
          pretty: false
        }
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "MsgId": ["5850440872586764820"],
        "foo": "bar"
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test when there is only one first-level element in the hash, that is used as root': function(test) {
      var actual, builder, expected, obj, opts;
      expected = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><first><MsgId>5850440872586764820</MsgId><foo>bar</foo></first>';
      opts = {
        renderOpts: {
          pretty: false
        }
      };
      builder = new xml2js.Builder(opts);
      obj = {
        "first": {
          "MsgId": ["5850440872586764820"],
          "foo": "bar"
        }
      };
      actual = builder.buildObject(obj);
      diffeq(expected, actual);
      return test.finish();
    },
    'test parser -> builder roundtrip': function(test) {
      var fileName;
      fileName = path.join(__dirname, '/fixtures/build_sample.xml');
      return fs.readFile(fileName, function(err, xmlData) {
        var xmlExpected;
        xmlExpected = xmlData.toString();
        return xml2js.parseString(xmlData, {
          'trim': true
        }, function(err, obj) {
          var builder, xmlActual;
          equ(err, null);
          builder = new xml2js.Builder({});
          xmlActual = builder.buildObject(obj);
          diffeq(xmlExpected, xmlActual);
          return test.finish();
        });
      });
    }
  };

}).call(this);
